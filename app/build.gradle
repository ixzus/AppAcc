apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
def androidlib = rootProject.ext.android
def dependencieslib = rootProject.ext.dependencies

def keystorePropertiesFile = rootProject.file("local.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

android {
    compileSdkVersion androidlib.compileSdkVersion
    defaultConfig {
        applicationId "com.example.ixzus.appacc"
        minSdkVersion androidlib.minSdkVersion
        targetSdkVersion androidlib.targetSdkVersion
        versionCode androidlib.versionCode
        versionName androidlib.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationVariants.all { variant ->
//                if (variant.buildType.name == 'debug') {
//                    variant.outputs.all { output ->
//                        def outputFile = output.outputFile
//                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                            def fileName = "ixzus-${defaultConfig.versionName}_${variant.flavorName}.apk"
//                            output.outputFileName = new File(outputFile.parent, fileName)
//                        }
//                    }
//                }
//            }
        }
    }

    signingConfigs {
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
//    dexOptions {
//        dexInProcess true
//        preDexLibraries true
//        javaMaxHeapSize "4g"
//        incremental true
//    }

    // flavorDimensions dimension 可以组合 如: 是否免费*渠道 2*2 [freegoogleplay'freewandoujia,paidgoogleplay,paidwandoujia]
//        flavorDimensions("isfree", "channel")
//        productFlavors {
//            free {dimension "isfree"}
//            paid {dimension "isfree"}
//
//            googleplay {dimension "channel"}
//            wandoujia {dimension "channel"}
//        }
    flavorDimensions "default"
    productFlavors {
        //如果需要不同的源代码或资源文件，可以在app/src下新建一个名为“flavor名”的目录（oem1）。也就是app/src/oem1
        //resConfigs 指定一种屏幕密度
        app {
            dimension "default"
            applicationId "com.example.ixzus.appacc"
//            resValue "string", "app_name", "appacc"
//            minSdkVersion 21
//            resConfigs "xxhdpi"
//            versionCode 1
            manifestPlaceholders = [UMENG_APPKEY: "我的友盟KEY"]
            signingConfig signingConfigs.debug
        }

        oem1 {
            dimension "default"
            applicationId "com.example.ixzus.oem1"
//            resValue "string", "app_name", "oem1"
//            minSdkVersion 19
//            resConfigs "xhdpi"
//            versionCode 1
            manifestPlaceholders = [UMENG_APPKEY: "我的友盟KEY"]
            signingConfig signingConfigs.debug
        }

        oem2 {
            dimension "default"
            applicationId "com.example.ixzus.appacc.oem2"
//            resValue "string", "app_name", "oem2"
//            minSdkVersion 19
//            resConfigs "xhdpi"
//            versionCode 1
            manifestPlaceholders = [UMENG_APPKEY: "我的友盟KEY"]
            signingConfig signingConfigs.debug
        }

    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation dependencieslib.kotlin
    implementation dependencieslib.appcompatV7
    implementation dependencieslib.constraint
//    compile 'com.google.dagger:dagger:2.12'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.12'
//    compile 'com.yltx.modulewd:wdlib:1.0.6'

    compile 'org.aspectj:aspectjrt:1.8.9'

}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
